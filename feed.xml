<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://qianchenzhumeng.github.io/</id><title>前尘逐梦</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-07-19T21:10:47+08:00</updated> <author> <name>前尘逐梦</name> <uri>https://qianchenzhumeng.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://qianchenzhumeng.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://qianchenzhumeng.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 前尘逐梦 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>CRC-32学习笔记</title><link href="https://qianchenzhumeng.github.io/posts/crc_32/" rel="alternate" type="text/html" title="CRC-32学习笔记" /><published>2021-07-19T14:29:00+08:00</published> <updated>2021-07-19T14:29:00+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/crc_32/</id> <content src="https://qianchenzhumeng.github.io/posts/crc_32/" /> <author> <name>前尘逐梦</name> </author> <category term="Rust" /> <summary> 1. 关键字 正向校验（Normal）、反向校验（Reversed）[1] 正向校验：MSB 反向校验：LSB 2. 多项式 \[G(X) = X^{32} + X^{26} + X^{23} + X^{22} + X^{16} + X^{12} + X^{11} + X^{10} + X^{8} + X^{7} + X^{5} + X^{4} + X^{2} + X +1\] 正向：0x04C1_1DB7（实际是 0x1_04C1_1DB7 最前面的 1 通常不写出来）。 反向：0xEDB8_8320（0x04C1_1DB7 反转） 3. 基本算法 (1) 正向校验 预置 1 个 32 位的变量 CRC，存放校验值，首先赋初值 0xffffffff； 查看规则判断第一个数据是否需要反转，若需要，则按位反转，若不需要，直接进入第 3 步； ... </summary> </entry> <entry><title>加快访问 Coursera 的速度</title><link href="https://qianchenzhumeng.github.io/posts/speed_up_coursera_access/" rel="alternate" type="text/html" title="加快访问 Coursera 的速度" /><published>2021-04-18T18:19:00+08:00</published> <updated>2021-04-18T18:19:00+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/speed_up_coursera_access/</id> <content src="https://qianchenzhumeng.github.io/posts/speed_up_coursera_access/" /> <author> <name>前尘逐梦</name> </author> <category term="Other" /> <summary> 大多数情况下，在国内访问 Coursera 会比较慢，甚至会出现视频加载失败的问题。这是因为 DNS 被污染了，可以通过修改 hosts 的方式解决 DNS 污染问题。 在这个 IPAddress.com 网站上查找如下三个域名对应的 IP 地址（一个域名可能会对应多个 IP 地址）： www.coursera.org d3c33hcgiwev3.cloudfront.net d3njjcbhbojbot.cloudfront.net 如果是 Windows，使用记事本打开 C:\Windows\System32\drivers\etc\hosts 文件，将查到的 IP 地址和域名追加到该文件中，例如： # coursera hosts 13.226.13.73 www.coursera.org 13.226.13.10 www.coursera.... </summary> </entry> <entry><title>STM8L SGP30 I2C 通信</title><link href="https://qianchenzhumeng.github.io/posts/stm8l_sgp30_i2c_communication/" rel="alternate" type="text/html" title="STM8L SGP30 I2C 通信" /><published>2021-04-18T18:19:00+08:00</published> <updated>2021-04-18T18:19:00+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/stm8l_sgp30_i2c_communication/</id> <content src="https://qianchenzhumeng.github.io/posts/stm8l_sgp30_i2c_communication/" /> <author> <name>前尘逐梦</name> </author> <category term="Embedded" /> <category term="MCU" /> <summary> 最近使用 STM8L151K6T6 的硬件 I2C 接口和 SGP30 通信的过程中，遇到一个奇怪的问题：在发送完 “sgp30_iaq_int” 后的 15s 的传感器初始化时段内读取 CO2 和 TVOC 浓度没问题，但是 15s 之后会出现传感器不回应 Sr 之后的读请求的情况。一度以为 Sr 后发送的地址可能由于连线或者其他问题失真，传感器不应答。但是从逻辑分析仪的测量结果来看，地址是没有问题的。 更奇怪的是，如果调试的时候，在发送 Sr 信号前添加断点，断住后再往下运行，传感器会回复 ACK，但是如果在发送 Sr 信号前添加延时，无论多久，传感器都不会回复 ACK。 仔细阅读传感器数据手册[1]，6.2 节有这样的描述： A measurement communication sequence consists of a START condition, t... </summary> </entry> <entry><title>OpenWrt GPIO（MT7688AN）</title><link href="https://qianchenzhumeng.github.io/posts/openwrt_gpio_of_mt7688an/" rel="alternate" type="text/html" title="OpenWrt GPIO（MT7688AN）" /><published>2021-03-20T10:00:00+08:00</published> <updated>2021-03-20T10:00:00+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/openwrt_gpio_of_mt7688an/</id> <content src="https://qianchenzhumeng.github.io/posts/openwrt_gpio_of_mt7688an/" /> <author> <name>前尘逐梦</name> </author> <category term="Embedded" /> <category term="OpenWrt" /> <summary> 1. 设备树 在开发板上查看引脚使用情况： root@OpenWrt:~# cat /sys/kernel/debug/gpio gpiochip0: GPIOs 0-31, parent: platform/10000600.gpio, 10000600.gpio: gpio-6 ( |reboot ) in hi gpiochip1: GPIOs 32-63, parent: platform/10000600.gpio, 10000600.gpio: gpio-38 ( |reset ) in hi gpio-41 ( |skw92a:green:wps ) out hi gpio... </summary> </entry> <entry><title>在树莓派上安装 ParKeepr</title><link href="https://qianchenzhumeng.github.io/posts/install_partkeepr_on_raspberry_pi/" rel="alternate" type="text/html" title="在树莓派上安装 ParKeepr" /><published>2021-03-10T20:05:00+08:00</published> <updated>2021-03-17T20:36:43+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/install_partkeepr_on_raspberry_pi/</id> <content src="https://qianchenzhumeng.github.io/posts/install_partkeepr_on_raspberry_pi/" /> <author> <name>前尘逐梦</name> </author> <category term="Toolbox" /> <category term="Parkeepr" /> <summary> 1. 背景 本文是对官方 wiki 的粗略翻译（原文见[1]），文中使用 Apache 作为服务器。我试过使用 Nginx + php7.3-fpm 的组合，没有成功，安装进行到预热缓存的时后老是失败，估计对树莓派来说负荷有点重。 2. 安装 (1) 安装环境 树莓派 3 B+，Raspbian GNU/Linux 10 (2) 下载安装包 下载安装包：partkeepr-1.4.0.tbz2 sudo apt-get install php tar -xvjf partkeepr-1.4.0.tbz2 sudo cp partkeepr-1.4.0 /var/www/partkeepr -r sudo chown www-data:www-data /var/www/partkeepr -R # 将当前用户添加到 www-data 组（可能需要重启）： sudo ad... </summary> </entry> </feed>
